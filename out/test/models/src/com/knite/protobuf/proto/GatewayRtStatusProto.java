package com.carl.protobuf.proto;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GatewayRtStatus.proto

public final class GatewayRtStatusProto {
  private GatewayRtStatusProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface GatewayRtStatusOrBuilder extends
      // @@protoc_insertion_point(interface_extends:GatewayRtStatus)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    boolean hasSN();
    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    String getSN();
    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    com.google.protobuf.ByteString
        getSNBytes();

    /**
     * <pre>
     * 数据时间，1970-1-1开始的总秒数
     * </pre>
     *
     * <code>required int32 RecTime_Seconds = 2;</code>
     */
    boolean hasRecTimeSeconds();
    /**
     * <pre>
     * 数据时间，1970-1-1开始的总秒数
     * </pre>
     *
     * <code>required int32 RecTime_Seconds = 2;</code>
     */
    int getRecTimeSeconds();

    /**
     * <pre>
     * 网关型号
     * </pre>
     *
     * <code>required int32 GatewayType = 3;</code>
     */
    boolean hasGatewayType();
    /**
     * <pre>
     * 网关型号
     * </pre>
     *
     * <code>required int32 GatewayType = 3;</code>
     */
    int getGatewayType();

    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    boolean hasVersionGateway();
    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    String getVersionGateway();
    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    com.google.protobuf.ByteString
        getVersionGatewayBytes();

    /**
     * <pre>
     * Mqtt通讯模块版本号
     * </pre>
     *
     * <code>optional int32 VersionMqtt = 5;</code>
     */
    boolean hasVersionMqtt();
    /**
     * <pre>
     * Mqtt通讯模块版本号
     * </pre>
     *
     * <code>optional int32 VersionMqtt = 5;</code>
     */
    int getVersionMqtt();

    /**
     * <pre>
     * 联网方式：0-未知，1-SIM，2-宽带
     * </pre>
     *
     * <code>optional int32 NetMode = 6;</code>
     */
    boolean hasNetMode();
    /**
     * <pre>
     * 联网方式：0-未知，1-SIM，2-宽带
     * </pre>
     *
     * <code>optional int32 NetMode = 6;</code>
     */
    int getNetMode();

    /**
     * <pre>
     * Sim卡信号值
     * </pre>
     *
     * <code>optional int32 SimSignal = 7;</code>
     */
    boolean hasSimSignal();
    /**
     * <pre>
     * Sim卡信号值
     * </pre>
     *
     * <code>optional int32 SimSignal = 7;</code>
     */
    int getSimSignal();

    /**
     * <pre>
     * CPU使用率
     * </pre>
     *
     * <code>optional float CpuUsage = 8;</code>
     */
    boolean hasCpuUsage();
    /**
     * <pre>
     * CPU使用率
     * </pre>
     *
     * <code>optional float CpuUsage = 8;</code>
     */
    float getCpuUsage();

    /**
     * <pre>
     * 内存使用率
     * </pre>
     *
     * <code>optional float MemUsage = 9;</code>
     */
    boolean hasMemUsage();
    /**
     * <pre>
     * 内存使用率
     * </pre>
     *
     * <code>optional float MemUsage = 9;</code>
     */
    float getMemUsage();

    /**
     * <pre>
     * 可用存储空间
     * </pre>
     *
     * <code>optional float StorageFree = 10;</code>
     */
    boolean hasStorageFree();
    /**
     * <pre>
     * 可用存储空间
     * </pre>
     *
     * <code>optional float StorageFree = 10;</code>
     */
    float getStorageFree();

    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    boolean hasIccid();
    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    String getIccid();
    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    com.google.protobuf.ByteString
        getIccidBytes();

    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    boolean hasExtendParam();
    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    String getExtendParam();
    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    com.google.protobuf.ByteString
        getExtendParamBytes();
  }
  /**
   * <pre>
   * 网关运行状态对象
   * </pre>
   *
   * Protobuf type {@code GatewayRtStatus}
   */
  public  static final class GatewayRtStatus extends
      com.google.protobuf.GeneratedMessageLite<
          GatewayRtStatus, GatewayRtStatus.Builder> implements
      // @@protoc_insertion_point(message_implements:GatewayRtStatus)
      GatewayRtStatusOrBuilder {
    private GatewayRtStatus() {
      sN_ = "";
      versionGateway_ = "";
      iccid_ = "";
      extendParam_ = "";
    }
    private int bitField0_;
    public static final int SN_FIELD_NUMBER = 1;
    private String sN_;
    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    public boolean hasSN() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    public String getSN() {
      return sN_;
    }
    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSNBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(sN_);
    }
    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    private void setSN(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      sN_ = value;
    }
    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    private void clearSN() {
      bitField0_ = (bitField0_ & ~0x00000001);
      sN_ = getDefaultInstance().getSN();
    }
    /**
     * <pre>
     * 设备唯一性标识，最多20字符
     * </pre>
     *
     * <code>required string SN = 1;</code>
     */
    private void setSNBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      sN_ = value.toStringUtf8();
    }

    public static final int RECTIME_SECONDS_FIELD_NUMBER = 2;
    private int recTimeSeconds_;
    /**
     * <pre>
     * 数据时间，1970-1-1开始的总秒数
     * </pre>
     *
     * <code>required int32 RecTime_Seconds = 2;</code>
     */
    public boolean hasRecTimeSeconds() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 数据时间，1970-1-1开始的总秒数
     * </pre>
     *
     * <code>required int32 RecTime_Seconds = 2;</code>
     */
    public int getRecTimeSeconds() {
      return recTimeSeconds_;
    }
    /**
     * <pre>
     * 数据时间，1970-1-1开始的总秒数
     * </pre>
     *
     * <code>required int32 RecTime_Seconds = 2;</code>
     */
    private void setRecTimeSeconds(int value) {
      bitField0_ |= 0x00000002;
      recTimeSeconds_ = value;
    }
    /**
     * <pre>
     * 数据时间，1970-1-1开始的总秒数
     * </pre>
     *
     * <code>required int32 RecTime_Seconds = 2;</code>
     */
    private void clearRecTimeSeconds() {
      bitField0_ = (bitField0_ & ~0x00000002);
      recTimeSeconds_ = 0;
    }

    public static final int GATEWAYTYPE_FIELD_NUMBER = 3;
    private int gatewayType_;
    /**
     * <pre>
     * 网关型号
     * </pre>
     *
     * <code>required int32 GatewayType = 3;</code>
     */
    public boolean hasGatewayType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 网关型号
     * </pre>
     *
     * <code>required int32 GatewayType = 3;</code>
     */
    public int getGatewayType() {
      return gatewayType_;
    }
    /**
     * <pre>
     * 网关型号
     * </pre>
     *
     * <code>required int32 GatewayType = 3;</code>
     */
    private void setGatewayType(int value) {
      bitField0_ |= 0x00000004;
      gatewayType_ = value;
    }
    /**
     * <pre>
     * 网关型号
     * </pre>
     *
     * <code>required int32 GatewayType = 3;</code>
     */
    private void clearGatewayType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      gatewayType_ = 0;
    }

    public static final int VERSIONGATEWAY_FIELD_NUMBER = 4;
    private String versionGateway_;
    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    public boolean hasVersionGateway() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    public String getVersionGateway() {
      return versionGateway_;
    }
    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    public com.google.protobuf.ByteString
        getVersionGatewayBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(versionGateway_);
    }
    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    private void setVersionGateway(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      versionGateway_ = value;
    }
    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    private void clearVersionGateway() {
      bitField0_ = (bitField0_ & ~0x00000008);
      versionGateway_ = getDefaultInstance().getVersionGateway();
    }
    /**
     * <pre>
     * 网关版本号，最多50字符
     * </pre>
     *
     * <code>optional string VersionGateway = 4;</code>
     */
    private void setVersionGatewayBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      versionGateway_ = value.toStringUtf8();
    }

    public static final int VERSIONMQTT_FIELD_NUMBER = 5;
    private int versionMqtt_;
    /**
     * <pre>
     * Mqtt通讯模块版本号
     * </pre>
     *
     * <code>optional int32 VersionMqtt = 5;</code>
     */
    public boolean hasVersionMqtt() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Mqtt通讯模块版本号
     * </pre>
     *
     * <code>optional int32 VersionMqtt = 5;</code>
     */
    public int getVersionMqtt() {
      return versionMqtt_;
    }
    /**
     * <pre>
     * Mqtt通讯模块版本号
     * </pre>
     *
     * <code>optional int32 VersionMqtt = 5;</code>
     */
    private void setVersionMqtt(int value) {
      bitField0_ |= 0x00000010;
      versionMqtt_ = value;
    }
    /**
     * <pre>
     * Mqtt通讯模块版本号
     * </pre>
     *
     * <code>optional int32 VersionMqtt = 5;</code>
     */
    private void clearVersionMqtt() {
      bitField0_ = (bitField0_ & ~0x00000010);
      versionMqtt_ = 0;
    }

    public static final int NETMODE_FIELD_NUMBER = 6;
    private int netMode_;
    /**
     * <pre>
     * 联网方式：0-未知，1-SIM，2-宽带
     * </pre>
     *
     * <code>optional int32 NetMode = 6;</code>
     */
    public boolean hasNetMode() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * 联网方式：0-未知，1-SIM，2-宽带
     * </pre>
     *
     * <code>optional int32 NetMode = 6;</code>
     */
    public int getNetMode() {
      return netMode_;
    }
    /**
     * <pre>
     * 联网方式：0-未知，1-SIM，2-宽带
     * </pre>
     *
     * <code>optional int32 NetMode = 6;</code>
     */
    private void setNetMode(int value) {
      bitField0_ |= 0x00000020;
      netMode_ = value;
    }
    /**
     * <pre>
     * 联网方式：0-未知，1-SIM，2-宽带
     * </pre>
     *
     * <code>optional int32 NetMode = 6;</code>
     */
    private void clearNetMode() {
      bitField0_ = (bitField0_ & ~0x00000020);
      netMode_ = 0;
    }

    public static final int SIMSIGNAL_FIELD_NUMBER = 7;
    private int simSignal_;
    /**
     * <pre>
     * Sim卡信号值
     * </pre>
     *
     * <code>optional int32 SimSignal = 7;</code>
     */
    public boolean hasSimSignal() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * Sim卡信号值
     * </pre>
     *
     * <code>optional int32 SimSignal = 7;</code>
     */
    public int getSimSignal() {
      return simSignal_;
    }
    /**
     * <pre>
     * Sim卡信号值
     * </pre>
     *
     * <code>optional int32 SimSignal = 7;</code>
     */
    private void setSimSignal(int value) {
      bitField0_ |= 0x00000040;
      simSignal_ = value;
    }
    /**
     * <pre>
     * Sim卡信号值
     * </pre>
     *
     * <code>optional int32 SimSignal = 7;</code>
     */
    private void clearSimSignal() {
      bitField0_ = (bitField0_ & ~0x00000040);
      simSignal_ = 0;
    }

    public static final int CPUUSAGE_FIELD_NUMBER = 8;
    private float cpuUsage_;
    /**
     * <pre>
     * CPU使用率
     * </pre>
     *
     * <code>optional float CpuUsage = 8;</code>
     */
    public boolean hasCpuUsage() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * CPU使用率
     * </pre>
     *
     * <code>optional float CpuUsage = 8;</code>
     */
    public float getCpuUsage() {
      return cpuUsage_;
    }
    /**
     * <pre>
     * CPU使用率
     * </pre>
     *
     * <code>optional float CpuUsage = 8;</code>
     */
    private void setCpuUsage(float value) {
      bitField0_ |= 0x00000080;
      cpuUsage_ = value;
    }
    /**
     * <pre>
     * CPU使用率
     * </pre>
     *
     * <code>optional float CpuUsage = 8;</code>
     */
    private void clearCpuUsage() {
      bitField0_ = (bitField0_ & ~0x00000080);
      cpuUsage_ = 0F;
    }

    public static final int MEMUSAGE_FIELD_NUMBER = 9;
    private float memUsage_;
    /**
     * <pre>
     * 内存使用率
     * </pre>
     *
     * <code>optional float MemUsage = 9;</code>
     */
    public boolean hasMemUsage() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * 内存使用率
     * </pre>
     *
     * <code>optional float MemUsage = 9;</code>
     */
    public float getMemUsage() {
      return memUsage_;
    }
    /**
     * <pre>
     * 内存使用率
     * </pre>
     *
     * <code>optional float MemUsage = 9;</code>
     */
    private void setMemUsage(float value) {
      bitField0_ |= 0x00000100;
      memUsage_ = value;
    }
    /**
     * <pre>
     * 内存使用率
     * </pre>
     *
     * <code>optional float MemUsage = 9;</code>
     */
    private void clearMemUsage() {
      bitField0_ = (bitField0_ & ~0x00000100);
      memUsage_ = 0F;
    }

    public static final int STORAGEFREE_FIELD_NUMBER = 10;
    private float storageFree_;
    /**
     * <pre>
     * 可用存储空间
     * </pre>
     *
     * <code>optional float StorageFree = 10;</code>
     */
    public boolean hasStorageFree() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * 可用存储空间
     * </pre>
     *
     * <code>optional float StorageFree = 10;</code>
     */
    public float getStorageFree() {
      return storageFree_;
    }
    /**
     * <pre>
     * 可用存储空间
     * </pre>
     *
     * <code>optional float StorageFree = 10;</code>
     */
    private void setStorageFree(float value) {
      bitField0_ |= 0x00000200;
      storageFree_ = value;
    }
    /**
     * <pre>
     * 可用存储空间
     * </pre>
     *
     * <code>optional float StorageFree = 10;</code>
     */
    private void clearStorageFree() {
      bitField0_ = (bitField0_ & ~0x00000200);
      storageFree_ = 0F;
    }

    public static final int ICCID_FIELD_NUMBER = 11;
    private String iccid_;
    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    public boolean hasIccid() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    public String getIccid() {
      return iccid_;
    }
    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    public com.google.protobuf.ByteString
        getIccidBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(iccid_);
    }
    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    private void setIccid(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
      iccid_ = value;
    }
    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    private void clearIccid() {
      bitField0_ = (bitField0_ & ~0x00000400);
      iccid_ = getDefaultInstance().getIccid();
    }
    /**
     * <pre>
     * Sim卡的ICCID，最多30字符
     * </pre>
     *
     * <code>optional string Iccid = 11;</code>
     */
    private void setIccidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
      iccid_ = value.toStringUtf8();
    }

    public static final int EXTENDPARAM_FIELD_NUMBER = 12;
    private String extendParam_;
    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    public boolean hasExtendParam() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    public String getExtendParam() {
      return extendParam_;
    }
    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    public com.google.protobuf.ByteString
        getExtendParamBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(extendParam_);
    }
    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    private void setExtendParam(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
      extendParam_ = value;
    }
    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    private void clearExtendParam() {
      bitField0_ = (bitField0_ & ~0x00000800);
      extendParam_ = getDefaultInstance().getExtendParam();
    }
    /**
     * <pre>
     * 扩展参数，最多500字符
     * </pre>
     *
     * <code>optional string ExtendParam = 12;</code>
     */
    private void setExtendParamBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
      extendParam_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeString(1, getSN());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, recTimeSeconds_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gatewayType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeString(4, getVersionGateway());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, versionMqtt_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, netMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, simSignal_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, cpuUsage_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, memUsage_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, storageFree_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeString(11, getIccid());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeString(12, getExtendParam());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSN());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, recTimeSeconds_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gatewayType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getVersionGateway());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, versionMqtt_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, netMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, simSignal_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, cpuUsage_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, memUsage_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, storageFree_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(11, getIccid());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(12, getExtendParam());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static GatewayRtStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GatewayRtStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GatewayRtStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GatewayRtStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GatewayRtStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GatewayRtStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GatewayRtStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static GatewayRtStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GatewayRtStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GatewayRtStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(GatewayRtStatus prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * 网关运行状态对象
     * </pre>
     *
     * Protobuf type {@code GatewayRtStatus}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          GatewayRtStatus, Builder> implements
        // @@protoc_insertion_point(builder_implements:GatewayRtStatus)
        GatewayRtStatusOrBuilder {
      // Construct using GatewayRtStatusProto.GatewayRtStatus.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * 设备唯一性标识，最多20字符
       * </pre>
       *
       * <code>required string SN = 1;</code>
       */
      public boolean hasSN() {
        return instance.hasSN();
      }
      /**
       * <pre>
       * 设备唯一性标识，最多20字符
       * </pre>
       *
       * <code>required string SN = 1;</code>
       */
      public String getSN() {
        return instance.getSN();
      }
      /**
       * <pre>
       * 设备唯一性标识，最多20字符
       * </pre>
       *
       * <code>required string SN = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSNBytes() {
        return instance.getSNBytes();
      }
      /**
       * <pre>
       * 设备唯一性标识，最多20字符
       * </pre>
       *
       * <code>required string SN = 1;</code>
       */
      public Builder setSN(
          String value) {
        copyOnWrite();
        instance.setSN(value);
        return this;
      }
      /**
       * <pre>
       * 设备唯一性标识，最多20字符
       * </pre>
       *
       * <code>required string SN = 1;</code>
       */
      public Builder clearSN() {
        copyOnWrite();
        instance.clearSN();
        return this;
      }
      /**
       * <pre>
       * 设备唯一性标识，最多20字符
       * </pre>
       *
       * <code>required string SN = 1;</code>
       */
      public Builder setSNBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSNBytes(value);
        return this;
      }

      /**
       * <pre>
       * 数据时间，1970-1-1开始的总秒数
       * </pre>
       *
       * <code>required int32 RecTime_Seconds = 2;</code>
       */
      public boolean hasRecTimeSeconds() {
        return instance.hasRecTimeSeconds();
      }
      /**
       * <pre>
       * 数据时间，1970-1-1开始的总秒数
       * </pre>
       *
       * <code>required int32 RecTime_Seconds = 2;</code>
       */
      public int getRecTimeSeconds() {
        return instance.getRecTimeSeconds();
      }
      /**
       * <pre>
       * 数据时间，1970-1-1开始的总秒数
       * </pre>
       *
       * <code>required int32 RecTime_Seconds = 2;</code>
       */
      public Builder setRecTimeSeconds(int value) {
        copyOnWrite();
        instance.setRecTimeSeconds(value);
        return this;
      }
      /**
       * <pre>
       * 数据时间，1970-1-1开始的总秒数
       * </pre>
       *
       * <code>required int32 RecTime_Seconds = 2;</code>
       */
      public Builder clearRecTimeSeconds() {
        copyOnWrite();
        instance.clearRecTimeSeconds();
        return this;
      }

      /**
       * <pre>
       * 网关型号
       * </pre>
       *
       * <code>required int32 GatewayType = 3;</code>
       */
      public boolean hasGatewayType() {
        return instance.hasGatewayType();
      }
      /**
       * <pre>
       * 网关型号
       * </pre>
       *
       * <code>required int32 GatewayType = 3;</code>
       */
      public int getGatewayType() {
        return instance.getGatewayType();
      }
      /**
       * <pre>
       * 网关型号
       * </pre>
       *
       * <code>required int32 GatewayType = 3;</code>
       */
      public Builder setGatewayType(int value) {
        copyOnWrite();
        instance.setGatewayType(value);
        return this;
      }
      /**
       * <pre>
       * 网关型号
       * </pre>
       *
       * <code>required int32 GatewayType = 3;</code>
       */
      public Builder clearGatewayType() {
        copyOnWrite();
        instance.clearGatewayType();
        return this;
      }

      /**
       * <pre>
       * 网关版本号，最多50字符
       * </pre>
       *
       * <code>optional string VersionGateway = 4;</code>
       */
      public boolean hasVersionGateway() {
        return instance.hasVersionGateway();
      }
      /**
       * <pre>
       * 网关版本号，最多50字符
       * </pre>
       *
       * <code>optional string VersionGateway = 4;</code>
       */
      public String getVersionGateway() {
        return instance.getVersionGateway();
      }
      /**
       * <pre>
       * 网关版本号，最多50字符
       * </pre>
       *
       * <code>optional string VersionGateway = 4;</code>
       */
      public com.google.protobuf.ByteString
          getVersionGatewayBytes() {
        return instance.getVersionGatewayBytes();
      }
      /**
       * <pre>
       * 网关版本号，最多50字符
       * </pre>
       *
       * <code>optional string VersionGateway = 4;</code>
       */
      public Builder setVersionGateway(
          String value) {
        copyOnWrite();
        instance.setVersionGateway(value);
        return this;
      }
      /**
       * <pre>
       * 网关版本号，最多50字符
       * </pre>
       *
       * <code>optional string VersionGateway = 4;</code>
       */
      public Builder clearVersionGateway() {
        copyOnWrite();
        instance.clearVersionGateway();
        return this;
      }
      /**
       * <pre>
       * 网关版本号，最多50字符
       * </pre>
       *
       * <code>optional string VersionGateway = 4;</code>
       */
      public Builder setVersionGatewayBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setVersionGatewayBytes(value);
        return this;
      }

      /**
       * <pre>
       * Mqtt通讯模块版本号
       * </pre>
       *
       * <code>optional int32 VersionMqtt = 5;</code>
       */
      public boolean hasVersionMqtt() {
        return instance.hasVersionMqtt();
      }
      /**
       * <pre>
       * Mqtt通讯模块版本号
       * </pre>
       *
       * <code>optional int32 VersionMqtt = 5;</code>
       */
      public int getVersionMqtt() {
        return instance.getVersionMqtt();
      }
      /**
       * <pre>
       * Mqtt通讯模块版本号
       * </pre>
       *
       * <code>optional int32 VersionMqtt = 5;</code>
       */
      public Builder setVersionMqtt(int value) {
        copyOnWrite();
        instance.setVersionMqtt(value);
        return this;
      }
      /**
       * <pre>
       * Mqtt通讯模块版本号
       * </pre>
       *
       * <code>optional int32 VersionMqtt = 5;</code>
       */
      public Builder clearVersionMqtt() {
        copyOnWrite();
        instance.clearVersionMqtt();
        return this;
      }

      /**
       * <pre>
       * 联网方式：0-未知，1-SIM，2-宽带
       * </pre>
       *
       * <code>optional int32 NetMode = 6;</code>
       */
      public boolean hasNetMode() {
        return instance.hasNetMode();
      }
      /**
       * <pre>
       * 联网方式：0-未知，1-SIM，2-宽带
       * </pre>
       *
       * <code>optional int32 NetMode = 6;</code>
       */
      public int getNetMode() {
        return instance.getNetMode();
      }
      /**
       * <pre>
       * 联网方式：0-未知，1-SIM，2-宽带
       * </pre>
       *
       * <code>optional int32 NetMode = 6;</code>
       */
      public Builder setNetMode(int value) {
        copyOnWrite();
        instance.setNetMode(value);
        return this;
      }
      /**
       * <pre>
       * 联网方式：0-未知，1-SIM，2-宽带
       * </pre>
       *
       * <code>optional int32 NetMode = 6;</code>
       */
      public Builder clearNetMode() {
        copyOnWrite();
        instance.clearNetMode();
        return this;
      }

      /**
       * <pre>
       * Sim卡信号值
       * </pre>
       *
       * <code>optional int32 SimSignal = 7;</code>
       */
      public boolean hasSimSignal() {
        return instance.hasSimSignal();
      }
      /**
       * <pre>
       * Sim卡信号值
       * </pre>
       *
       * <code>optional int32 SimSignal = 7;</code>
       */
      public int getSimSignal() {
        return instance.getSimSignal();
      }
      /**
       * <pre>
       * Sim卡信号值
       * </pre>
       *
       * <code>optional int32 SimSignal = 7;</code>
       */
      public Builder setSimSignal(int value) {
        copyOnWrite();
        instance.setSimSignal(value);
        return this;
      }
      /**
       * <pre>
       * Sim卡信号值
       * </pre>
       *
       * <code>optional int32 SimSignal = 7;</code>
       */
      public Builder clearSimSignal() {
        copyOnWrite();
        instance.clearSimSignal();
        return this;
      }

      /**
       * <pre>
       * CPU使用率
       * </pre>
       *
       * <code>optional float CpuUsage = 8;</code>
       */
      public boolean hasCpuUsage() {
        return instance.hasCpuUsage();
      }
      /**
       * <pre>
       * CPU使用率
       * </pre>
       *
       * <code>optional float CpuUsage = 8;</code>
       */
      public float getCpuUsage() {
        return instance.getCpuUsage();
      }
      /**
       * <pre>
       * CPU使用率
       * </pre>
       *
       * <code>optional float CpuUsage = 8;</code>
       */
      public Builder setCpuUsage(float value) {
        copyOnWrite();
        instance.setCpuUsage(value);
        return this;
      }
      /**
       * <pre>
       * CPU使用率
       * </pre>
       *
       * <code>optional float CpuUsage = 8;</code>
       */
      public Builder clearCpuUsage() {
        copyOnWrite();
        instance.clearCpuUsage();
        return this;
      }

      /**
       * <pre>
       * 内存使用率
       * </pre>
       *
       * <code>optional float MemUsage = 9;</code>
       */
      public boolean hasMemUsage() {
        return instance.hasMemUsage();
      }
      /**
       * <pre>
       * 内存使用率
       * </pre>
       *
       * <code>optional float MemUsage = 9;</code>
       */
      public float getMemUsage() {
        return instance.getMemUsage();
      }
      /**
       * <pre>
       * 内存使用率
       * </pre>
       *
       * <code>optional float MemUsage = 9;</code>
       */
      public Builder setMemUsage(float value) {
        copyOnWrite();
        instance.setMemUsage(value);
        return this;
      }
      /**
       * <pre>
       * 内存使用率
       * </pre>
       *
       * <code>optional float MemUsage = 9;</code>
       */
      public Builder clearMemUsage() {
        copyOnWrite();
        instance.clearMemUsage();
        return this;
      }

      /**
       * <pre>
       * 可用存储空间
       * </pre>
       *
       * <code>optional float StorageFree = 10;</code>
       */
      public boolean hasStorageFree() {
        return instance.hasStorageFree();
      }
      /**
       * <pre>
       * 可用存储空间
       * </pre>
       *
       * <code>optional float StorageFree = 10;</code>
       */
      public float getStorageFree() {
        return instance.getStorageFree();
      }
      /**
       * <pre>
       * 可用存储空间
       * </pre>
       *
       * <code>optional float StorageFree = 10;</code>
       */
      public Builder setStorageFree(float value) {
        copyOnWrite();
        instance.setStorageFree(value);
        return this;
      }
      /**
       * <pre>
       * 可用存储空间
       * </pre>
       *
       * <code>optional float StorageFree = 10;</code>
       */
      public Builder clearStorageFree() {
        copyOnWrite();
        instance.clearStorageFree();
        return this;
      }

      /**
       * <pre>
       * Sim卡的ICCID，最多30字符
       * </pre>
       *
       * <code>optional string Iccid = 11;</code>
       */
      public boolean hasIccid() {
        return instance.hasIccid();
      }
      /**
       * <pre>
       * Sim卡的ICCID，最多30字符
       * </pre>
       *
       * <code>optional string Iccid = 11;</code>
       */
      public String getIccid() {
        return instance.getIccid();
      }
      /**
       * <pre>
       * Sim卡的ICCID，最多30字符
       * </pre>
       *
       * <code>optional string Iccid = 11;</code>
       */
      public com.google.protobuf.ByteString
          getIccidBytes() {
        return instance.getIccidBytes();
      }
      /**
       * <pre>
       * Sim卡的ICCID，最多30字符
       * </pre>
       *
       * <code>optional string Iccid = 11;</code>
       */
      public Builder setIccid(
          String value) {
        copyOnWrite();
        instance.setIccid(value);
        return this;
      }
      /**
       * <pre>
       * Sim卡的ICCID，最多30字符
       * </pre>
       *
       * <code>optional string Iccid = 11;</code>
       */
      public Builder clearIccid() {
        copyOnWrite();
        instance.clearIccid();
        return this;
      }
      /**
       * <pre>
       * Sim卡的ICCID，最多30字符
       * </pre>
       *
       * <code>optional string Iccid = 11;</code>
       */
      public Builder setIccidBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIccidBytes(value);
        return this;
      }

      /**
       * <pre>
       * 扩展参数，最多500字符
       * </pre>
       *
       * <code>optional string ExtendParam = 12;</code>
       */
      public boolean hasExtendParam() {
        return instance.hasExtendParam();
      }
      /**
       * <pre>
       * 扩展参数，最多500字符
       * </pre>
       *
       * <code>optional string ExtendParam = 12;</code>
       */
      public String getExtendParam() {
        return instance.getExtendParam();
      }
      /**
       * <pre>
       * 扩展参数，最多500字符
       * </pre>
       *
       * <code>optional string ExtendParam = 12;</code>
       */
      public com.google.protobuf.ByteString
          getExtendParamBytes() {
        return instance.getExtendParamBytes();
      }
      /**
       * <pre>
       * 扩展参数，最多500字符
       * </pre>
       *
       * <code>optional string ExtendParam = 12;</code>
       */
      public Builder setExtendParam(
          String value) {
        copyOnWrite();
        instance.setExtendParam(value);
        return this;
      }
      /**
       * <pre>
       * 扩展参数，最多500字符
       * </pre>
       *
       * <code>optional string ExtendParam = 12;</code>
       */
      public Builder clearExtendParam() {
        copyOnWrite();
        instance.clearExtendParam();
        return this;
      }
      /**
       * <pre>
       * 扩展参数，最多500字符
       * </pre>
       *
       * <code>optional string ExtendParam = 12;</code>
       */
      public Builder setExtendParamBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setExtendParamBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:GatewayRtStatus)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new GatewayRtStatus();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!hasSN()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasRecTimeSeconds()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasGatewayType()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          GatewayRtStatus other = (GatewayRtStatus) arg1;
          sN_ = visitor.visitString(
              hasSN(), sN_,
              other.hasSN(), other.sN_);
          recTimeSeconds_ = visitor.visitInt(
              hasRecTimeSeconds(), recTimeSeconds_,
              other.hasRecTimeSeconds(), other.recTimeSeconds_);
          gatewayType_ = visitor.visitInt(
              hasGatewayType(), gatewayType_,
              other.hasGatewayType(), other.gatewayType_);
          versionGateway_ = visitor.visitString(
              hasVersionGateway(), versionGateway_,
              other.hasVersionGateway(), other.versionGateway_);
          versionMqtt_ = visitor.visitInt(
              hasVersionMqtt(), versionMqtt_,
              other.hasVersionMqtt(), other.versionMqtt_);
          netMode_ = visitor.visitInt(
              hasNetMode(), netMode_,
              other.hasNetMode(), other.netMode_);
          simSignal_ = visitor.visitInt(
              hasSimSignal(), simSignal_,
              other.hasSimSignal(), other.simSignal_);
          cpuUsage_ = visitor.visitFloat(
              hasCpuUsage(), cpuUsage_,
              other.hasCpuUsage(), other.cpuUsage_);
          memUsage_ = visitor.visitFloat(
              hasMemUsage(), memUsage_,
              other.hasMemUsage(), other.memUsage_);
          storageFree_ = visitor.visitFloat(
              hasStorageFree(), storageFree_,
              other.hasStorageFree(), other.storageFree_);
          iccid_ = visitor.visitString(
              hasIccid(), iccid_,
              other.hasIccid(), other.iccid_);
          extendParam_ = visitor.visitString(
              hasExtendParam(), extendParam_,
              other.hasExtendParam(), other.extendParam_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readString();
                  bitField0_ |= 0x00000001;
                  sN_ = s;
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  recTimeSeconds_ = input.readInt32();
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000004;
                  gatewayType_ = input.readInt32();
                  break;
                }
                case 34: {
                  String s = input.readString();
                  bitField0_ |= 0x00000008;
                  versionGateway_ = s;
                  break;
                }
                case 40: {
                  bitField0_ |= 0x00000010;
                  versionMqtt_ = input.readInt32();
                  break;
                }
                case 48: {
                  bitField0_ |= 0x00000020;
                  netMode_ = input.readInt32();
                  break;
                }
                case 56: {
                  bitField0_ |= 0x00000040;
                  simSignal_ = input.readInt32();
                  break;
                }
                case 69: {
                  bitField0_ |= 0x00000080;
                  cpuUsage_ = input.readFloat();
                  break;
                }
                case 77: {
                  bitField0_ |= 0x00000100;
                  memUsage_ = input.readFloat();
                  break;
                }
                case 85: {
                  bitField0_ |= 0x00000200;
                  storageFree_ = input.readFloat();
                  break;
                }
                case 90: {
                  String s = input.readString();
                  bitField0_ |= 0x00000400;
                  iccid_ = s;
                  break;
                }
                case 98: {
                  String s = input.readString();
                  bitField0_ |= 0x00000800;
                  extendParam_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (GatewayRtStatus.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:GatewayRtStatus)
    private static final GatewayRtStatus DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GatewayRtStatus();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static GatewayRtStatus getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GatewayRtStatus> PARSER;

    public static com.google.protobuf.Parser<GatewayRtStatus> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
